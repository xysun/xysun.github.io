<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Do Nothing</title><link>https://xysun.github.io</link><description>I strove for none, for none was worth my strife.</description><atom:link href="https://xysun.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><lastBuildDate>Mon, 19 May 2014 00:37:19 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to insert images into posts in Nikola</title><link>https://xysun.github.io/posts/how-to-insert-pictures-into-posts-in-nikola.html</link><description>&lt;p&gt;Since it took me a surprisingly long time to solve this simple problem -- it's not in Nikola's &lt;a href="http://getnikola.com/handbook.html"&gt;official docs&lt;/a&gt;(where they only have a section on galleries) and my Google search was unfruitful, I thought I'd write it down.&lt;/p&gt;
&lt;p&gt;The simple trick is based on the fact that Nikola will automatically copy all contents under &lt;code&gt;files/&lt;/code&gt; folder to &lt;code&gt;output/&lt;/code&gt; folder when you run &lt;code&gt;nikola build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a subdirectory in &lt;code&gt;files/&lt;/code&gt;. Say &lt;code&gt;regex_pic/&lt;/code&gt; (where I put my images for the previous post on &lt;a href="http://xysun.github.io/posts/regex-parsing-thompsons-algorithm.html"&gt;parsing regex&lt;/a&gt;) -- this is more about better practice, since I don't like to clutter my &lt;code&gt;output/&lt;/code&gt; folder. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put your images into that folder. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your post, use regular markdown syntax to reference those images. For example: &lt;code&gt;![simple image1](/regex_pic/simple1.jpg)&lt;/code&gt; will insert &lt;code&gt;regex_pic/simple1.jpg&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nikola build&lt;/code&gt;. Done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><category>Tricks</category><category>Code</category><guid>https://xysun.github.io/posts/how-to-insert-pictures-into-posts-in-nikola.html</guid><pubDate>Mon, 19 May 2014 00:19:35 GMT</pubDate></item><item><title>Regex parsing: Thompson's algorithm</title><link>https://xysun.github.io/posts/regex-parsing-thompsons-algorithm.html</link><description>&lt;p&gt;This is a repost of my previous blog article at the old domain. &lt;/p&gt;
&lt;p&gt;Source code can be found &lt;a href="https://github.com/xysun/regex"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Theory&lt;/h3&gt;
&lt;p&gt;The central idea behind a regex engine is non-deterministic automata, NFA. While the name is scary, it is just a state machine which can transit to other state machines on certain characters or nothing (which is called an "epsilon transition")&lt;/p&gt;
&lt;p&gt;For example, below is an NFA for the simple concatenation regex &lt;code&gt;ab&lt;/code&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="simple regex1" src="https://xysun.github.io/regex_pic/simple1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s0&lt;/code&gt; is the start state. It can accept one character 'a' and transform to state &lt;code&gt;s1&lt;/code&gt;. Similarly &lt;code&gt;s1&lt;/code&gt; can only accept one character 'b' and transfer to state &lt;code&gt;s2&lt;/code&gt;. &lt;code&gt;s2&lt;/code&gt; is the final state, if we have exhausted the input string and the current state is a final state, the pattern matching is successful. &lt;/p&gt;
&lt;p&gt;Below is a slightly more complicated example, matching &lt;code&gt;a?a&lt;/code&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="simple regex2" src="https://xysun.github.io/regex_pic/simple2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here the transition with an epsilon means a state can transform into the next state without any input. Therefore this combined NFA matches both &lt;code&gt;aa&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;, i.e. &lt;code&gt;a?a&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;To build a regex engine is just to build an NFA corresponding to the input regex pattern, which can be done similarly as parsing arithmetic expressions, i.e. push individual NFAs for individual characters onto a stack, upon seeing an operator, eg star/question mark/alternation/concatenation, pop NFAs from the stack, connecting the popped NFAs to form a new NFA and push back onto the stack again. &lt;/p&gt;
&lt;p&gt;I recommend these two excellent articles on NFA. &lt;a href="http://perl.plover.com/Regex/article.html"&gt;1. How Regexes Work &lt;/a&gt; &lt;a href="http://swtch.com/~rsc/regexp/regexp1.html"&gt;2. Regular Expression Matching Can be Simple and Fast&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Thompson's algorithm&lt;/h3&gt;
&lt;p&gt;The difference between Thompson's algorithm and the current backtracking implementation in Python/Ruby/... lies in the treatment for multiple transitions. Backtracking algorithm tracks only one transition at one step (always choose the greedy transition) and backtrack to another route if current route fails, while Thompson's algorithm tracks all possible transitions simultaneously. &lt;/p&gt;
&lt;p&gt;Take the above &lt;code&gt;a?a&lt;/code&gt; for example, suppose we are matching an input string of &lt;code&gt;a&lt;/code&gt; to this NFA. The backtracking algorithm will try the &lt;code&gt;a&lt;/code&gt; transition from &lt;code&gt;s0&lt;/code&gt; to &lt;code&gt;s1&lt;/code&gt; first since it is greedy, but this route fails since input is exhausted at non-final state &lt;code&gt;s1&lt;/code&gt;, so the algorithm backtracks to &lt;code&gt;s0&lt;/code&gt; and choose the epsilon transition this time, and is able to arrive at the final state &lt;code&gt;s2&lt;/code&gt; correctly. On the other hand, Thompson's algorithm will try to track both &lt;code&gt;a&lt;/code&gt; and epsilon transition simultaneously. Before it reads anything, both &lt;code&gt;s0&lt;/code&gt; and &lt;code&gt;s1&lt;/code&gt; are considered as starting states since &lt;code&gt;s0&lt;/code&gt; can transit into &lt;code&gt;s1&lt;/code&gt; without any input. Now after reading the only character &lt;code&gt;a&lt;/code&gt;, only &lt;code&gt;s1&lt;/code&gt; will successfully transit into final state &lt;code&gt;s2&lt;/code&gt;, and the matching completes. &lt;/p&gt;
&lt;p&gt;This means Thompson's algorithm will significantly perform better over some pathological input patterns such as &lt;code&gt;a?a?a?aaa&lt;/code&gt; matching &lt;code&gt;aaa&lt;/code&gt;, since time complexity is exponential for backtracking algorithm and only linear for Thompson's algorithm.&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;First step is to convert an input string into post-fix tokens, and add concatenation in the right place. A simple lexer and recursive-descent parser is used for this stage, following the grammar below (for detailed lexing and parsing code please refer to the source code):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;Grammar&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;

&lt;span class="n"&gt;exp&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="sc"&gt;'|'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt;                   &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;

&lt;span class="n"&gt;term&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;       &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x08&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x08&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;

&lt;span class="n"&gt;factor&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="n"&gt;star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="sc"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="n"&gt;plus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="sc"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="sc"&gt;'?'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt;

&lt;span class="n"&gt;primary&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;              &lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A very simple class is enough to simulate an NFA:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c"&gt;# epsilon-closure&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transitions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c"&gt;# a dictionary of char --&amp;gt; state&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="c"&gt;# is it the ending state?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we read one token at a time, perform relevant NFA transformations and push the transformed NFA onto a stack. For example, when seeing a CONCAT token, pop two NFAs from the stack, chain these two NFAs together and create a new CONCAT NFA, and push the new NFA onto the stack again. When all the tokens are consumed, there should be only one  NFA left on the stack. Details on how to construct NFAs can be found either from the two articles cited above, or from the book &lt;a href="http://www.amazon.com/Compilers-Principles-Techniques-Tools-Edition/dp/0321486811"&gt;Compilers: Principles Techniques and Tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;handler&lt;/code&gt; class is used for this step, the class has a dictionary of different handlers for each type of tokens. &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'CHAR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'CONCAT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_concat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;'ALT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_alt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'STAR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_rep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s"&gt;'PLUS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_rep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'QMARK'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_qmark&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These steps above form the exposed &lt;code&gt;compile&lt;/code&gt; function, which turns an input regex string into an NFA machine. &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Lexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NFA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;lexer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lexer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;nfa_stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nfa_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nfa_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c"&gt;# check there is only one final NFA on the stack&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nfa_stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can feed the constructed NFA a string and check whether it is accepted or not. The &lt;code&gt;match&lt;/code&gt; function uses two &lt;code&gt;sets&lt;/code&gt; to hold &lt;code&gt;current_state&lt;/code&gt; and &lt;code&gt;next_state&lt;/code&gt;, make each &lt;code&gt;char&lt;/code&gt; transitions and epsilon transitions and check if any ending state is arrived:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;current_states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addstate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_states&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# addstate makes epsilon transitions&lt;/span&gt;

       &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="n"&gt;next_states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transitions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                   &lt;span class="n"&gt;trans_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addstate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trans_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_states&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

           &lt;span class="n"&gt;current_states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_states&lt;/span&gt; 

       &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;#check if any ending state reached, if so, return match&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;Benchmarking with Python's built-in &lt;code&gt;re&lt;/code&gt; module, over normal inputs (from &lt;a href="http://www2.research.att.com/~gsf/testregex/"&gt;Glenn Fowler's test suite&lt;/a&gt;, Python performs better, which is as expected since I didn't do any optimization. But the average speed is fast for both algorithms -- less than 1ms.&lt;/p&gt;
&lt;p&gt;&lt;img alt="performance 1" src="https://xysun.github.io/regex_pic/plot_normal.jpg"&gt;&lt;/p&gt;
&lt;p&gt;However, when tested with those pathological inputs, Thompson's algorithm is a clear win, specifically Python will hang when &lt;code&gt;n&lt;/code&gt; is over 25. Notice the time scale is in seconds rather than in milliseconds in the previous plot. &lt;/p&gt;
&lt;p&gt;&lt;img alt="performance 2" src="https://xysun.github.io/regex_pic/plot_path.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Russ Cox wrote about &lt;a href="http://swtch.com/~rsc/regexp/regexp1.html"&gt;history behind regex implementation&lt;/a&gt; (last section).&lt;/p&gt;</description><category>Code</category><guid>https://xysun.github.io/posts/regex-parsing-thompsons-algorithm.html</guid><pubDate>Sun, 18 May 2014 22:26:11 GMT</pubDate></item><item><title>Install LLVM OCaml bindings (and UTop)</title><link>https://xysun.github.io/posts/install-llvm-ocaml-bindings-and-toplevel.html</link><description>&lt;p&gt;I put on a &lt;a href="http://stackoverflow.com/questions/20002608/llvm-ocaml-bindings"&gt;Stackoverflow answer here&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build LLVM with configuration: &lt;code&gt;--with-ocaml-libdir =&lt;/code&gt;ocamlc -where``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To compile LLVM codes: &lt;code&gt;ocamlc -cc g++ llvm.cma test.ml -o test&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To make UTop work: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;create a &lt;code&gt;myutop_main.ml&lt;/code&gt; file with: &lt;code&gt;let () = UTop_main.main ()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create a custom &lt;code&gt;llvmutop&lt;/code&gt;: &lt;code&gt;ocamlfind ocamlmktop -o llvmutop -thread -linkpkg -package utop llvm.cma myutop_main.ml -cc g++&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you just want OCaml's build-in toplevel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ocamlmktop -o llvmtop llvm.cma -cc g++&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><category>Code</category><category>Tricks</category><guid>https://xysun.github.io/posts/install-llvm-ocaml-bindings-and-toplevel.html</guid><pubDate>Tue, 06 May 2014 23:27:24 GMT</pubDate></item><item><title>Week 20140504</title><link>https://xysun.github.io/posts/week-20140504.html</link><description>&lt;h4&gt;&lt;a href="http://courses.cs.washington.edu/courses/cse341/13sp/#lectures"&gt;Dan Grossman&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Syntax, semantics, idioms, libraries, tools&lt;/li&gt;
&lt;li&gt;records: &lt;code&gt;#field_name record_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tuples are syntax sugers of records (field_name = 1, 2, 3...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datatype&lt;/code&gt; bindings: &lt;code&gt;Constant of int | Add of expr * expr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pattern matching: &lt;code&gt;case x of =&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;one-of (Option); each-of (Records)&lt;/li&gt;
&lt;li&gt;type synonym: &lt;code&gt;type name = t&lt;/code&gt;. &lt;code&gt;type card = suit * rank&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;polymorphic datatype: &lt;code&gt;datatype 'a option = NONE | SOME of 'a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;val p = e&lt;/code&gt;. &lt;code&gt;p&lt;/code&gt; --&amp;gt; patterns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fun f p = e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exception&lt;/code&gt;, &lt;code&gt;raise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e1 handle exn =&amp;gt; e2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tail optimization: remove caller from call stack&lt;/li&gt;
&lt;li&gt;the wrath of premature optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://www.amazon.com/Foundation-Novels-Isaac-Asimov/dp/0553293354/ref=sr_1_1?ie=UTF8&amp;amp;qid=1399198338&amp;amp;sr=8-1&amp;amp;keywords=asimov+foundation"&gt;Foundation by Isaac Asimov&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;(Notes generated by my little &lt;a href="https://gist.github.com/xysun/9837480"&gt;Kindle script&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're born in a cubicle and grow up in a corridor, and work in a cell, and vacation in a crowded sun-room, then coming up into the open with nothing but sky over you might just give you a nervous breakdown. &lt;/li&gt;
&lt;li&gt;I don't care an electron&lt;/li&gt;
&lt;li&gt;And when Onum Barr stepped into his little garden early the next morning, he found a box at his feet. It contained provisions, concentrated provisions such as one would find aboard ship, and alien in taste and preparation. But they were good, and lasted long. &lt;/li&gt;
&lt;li&gt;The whole war is a battle between those two systems, between the Empire and the Foundation; between the big and the little. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Maximum_subarray_problem"&gt;Max sub-array problem&lt;/a&gt;&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;max_sub_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;max_ending_here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_so_far&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;begin_temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;max_ending_here&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;max_ending_here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;begin_temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="nl"&gt;else:&lt;/span&gt;
            &lt;span class="n"&gt;max_ending_here&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;max_ending_here&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;max_so_far&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;max_so_far&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_ending_here&lt;/span&gt;
            &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;begin_temp&lt;/span&gt;
            &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_so_far&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Weekly</category><category>Code</category><guid>https://xysun.github.io/posts/week-20140504.html</guid><pubDate>Thu, 01 May 2014 22:24:37 GMT</pubDate></item><item><title>App Jamming 2014</title><link>https://xysun.github.io/posts/app-jamming-2014.html</link><description>&lt;h4&gt;App Jamming 2014&lt;/h4&gt;
&lt;p&gt;I was at my friend Michelle's app jamming 2014 event yesterday as a mentor. This is my first such experience and I thought I'd make a note, mostly because it was fun, partly because I really need to pick up blogging again.&lt;/p&gt;
&lt;p&gt;(I'll post pictures once I get them)&lt;/p&gt;
&lt;p&gt;App jamming is an annual event where we teach teenage girls (mostly age 11-15) to code with the help of &lt;a href="http://ai2.appinventor.mit.edu/"&gt;MIT App inventor&lt;/a&gt;. This year is the second year and around 50 girls signed up. &lt;/p&gt;
&lt;p&gt;Most girls have never written a line of code before. Because of this I was a bit reserved about the idea of writing an app, since in my mind writing an app is not necessary the best introduction to programming. But it turned out alright, and in hindsight, I think making an app has its unique advantages: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Better interaction, with UI&lt;/p&gt;
&lt;p&gt;MIT app inventor is awesome in that the build process is very simple and elegant -- just scan a QR code and the app would run on an Android phone. &lt;/p&gt;
&lt;p&gt;Kids were over the moon when they made the first app, "HelloPurr", where you can pat a cat and it will "meow". The room was filled with "meow"s and I don't think a traditional "Hello world" would have the same effect. (When I wrote my Hello world I emailed the .exe to my parents only to find out they were disappointed, my mom was like, "I thought there would be music!")&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programming with blocks&lt;/p&gt;
&lt;p&gt;The app inventor uses the same idea behind &lt;a href="http://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;, also from MIT, where you write programs by dragging logic blocks. While I am still a bit suspicious on whether this will foster the right logic thinking, it is indeed a straightforward-yet-not-scaring introduction of programming, since you don't need a text editor at all. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Along the way I've noticed a few interesting things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most kids' favorite app is instagram! I've never ever used instagram. Gesus I feel so old. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most kids' want to be invisible if they could have one superpower. &lt;/p&gt;
&lt;p&gt;I...never...thought about that. I only wished I could have more time than others (there was an episode in Doraemon where Nobi can stop the world's time and go to do whatever he wants and restarts world's time again. I remember watching this and thinking, I really really want to do the same. &lt;/p&gt;
&lt;p&gt;Is it because parents nowadays are way too harsh on their kids? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unfortunately, they also have amazingly short attention spans. &lt;/p&gt;
&lt;p&gt;I think it is partly due to the iPad-dominated world right now. I try to help on this as much as possible, by never giving answers straight away but rather guide them through the thinking process ("How do you want to make the ants move? What would happen when the hand crashes with the ant? And what's the right function to do that? Do you think &lt;code&gt;collide&lt;/code&gt; is a good choice? Why?") But I don't think it helps much, especially during such short time. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Overall it was fun. Kids were a bit quiet in the very first beginning but jumping around soon after they made the kitten meow. There was a moment during the lunch break, where we accidentally realized that while all the mentors were chatting in the lunch area, all the kids were at their table, focused on their app. That was beautiful and precious. &lt;/p&gt;
&lt;p&gt;As Michelle put it, we are working hard at bringing more girls (also with the newly founded &lt;a href="http://womenwhocodehk.com/"&gt;Women Who Code HK&lt;/a&gt;) into programming because we no longer want to be outliers in this industry. And so far things look promising. &lt;/p&gt;
&lt;p&gt;(There was a girl at my table who participated last year, and fell in love with programming. This year she is graduating from high school and she is picking computer science as her major. I was talking to her and telling her she would have a great adventure and we were both excited. It's really fulfilling to see we actually made an impact. )&lt;/p&gt;</description><category>Code</category><guid>https://xysun.github.io/posts/app-jamming-2014.html</guid><pubDate>Sat, 19 Apr 2014 23:00:23 GMT</pubDate></item><item><title>Week 20140420</title><link>https://xysun.github.io/posts/week-20140420.html</link><description>&lt;h4&gt;&lt;a href="https://www.youtube.com/watch?v=St9cL47_1GI"&gt;Advanced technique for web functional testing&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;test responsive: &lt;code&gt;self.driver.set_window_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Needle -- test by comparing screenshots&lt;/li&gt;
&lt;li&gt;Saucelabs&lt;/li&gt;
&lt;li&gt;&lt;a href="http://davehaeffner.com/selenium-guidebook/"&gt;the selenium guidebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;selenium testing tools cookbook&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://blog.miguelgrinberg.com/post/easy-web-scraping-with-python"&gt;Web scraping with Python&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multiprocessing.Pool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argparse&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Micellaneous&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845"&gt;decorators with arguments&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;manually create swap file&lt;/p&gt;
&lt;p&gt;Recently when I try to update the &lt;code&gt;opam&lt;/code&gt; on my &lt;a href="https://www.digitalocean.com/?refcode=52476c7ad3e1"&gt;DigitalOcean&lt;/a&gt; server, the below error pop up: &lt;/p&gt;
&lt;p&gt;opam: "fork" failed: Cannot allocate memory.&lt;/p&gt;
&lt;p&gt;It is due to lack of RAM memory. The solution is to create a swap file. I followed the instructions &lt;a href="http://wiki.paparazziuav.org/wiki/GettingTheGCSRunningonAGumstixBoard"&gt;here&lt;/a&gt;, note to compile &lt;code&gt;core&lt;/code&gt; a 512MB swap is not enough, I ended up creating a 1G swap. DigitalOcean also has a nice article on &lt;a href="https://www.digitalocean.com/community/articles/how-to-add-swap-on-ubuntu-12-04"&gt;creating swap files&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>Code</category><category>Weekly</category><guid>https://xysun.github.io/posts/week-20140420.html</guid><pubDate>Mon, 14 Apr 2014 21:41:33 GMT</pubDate></item><item><title>Week 20140406</title><link>https://xysun.github.io/posts/week-20140406.html</link><description>&lt;h4&gt;Dan Grossman&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;functions over lists are usually recursive: empty list; non-empty list (&lt;code&gt;hd&lt;/code&gt;, &lt;code&gt;tl&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;let expression: &lt;code&gt;let...in...end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Do a recursive computation, store in (local binding)&lt;/li&gt;
&lt;li&gt;Option: &lt;code&gt;isSome&lt;/code&gt;, &lt;code&gt;valOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bool comparisons: &lt;code&gt;andalso&lt;/code&gt;, &lt;code&gt;orelse&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;real&lt;/code&gt; is not an equality type (subject to round errors)&lt;/li&gt;
&lt;li&gt;no mutation --&amp;gt; no need to worry about alias or copies --&amp;gt; implementation more efficient &amp;amp; better security&lt;/li&gt;
&lt;li&gt;Done &lt;a href="https://github.com/xysun/armory/tree/master/ProgrammingLanguages"&gt;HW1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://www.youtube.com/watch?v=fYlnfvKVDoM"&gt;Brandon Rhodes Pycon talk&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://duartes.org/gustavo/blog/post/what-your-computer-does-while-you-wait/"&gt;Gustavo Duarte -- what your computer does while you wait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danluu.com/3c-conflict/"&gt;Dan Luu -- how misaligning data can increase performance 12x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python store general purpose data structures (eg. tuple) as array of addresses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt; on a list adds extra spaces -- amortization&lt;/li&gt;
&lt;li&gt;list is fast for tail operations: &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;. Not &lt;code&gt;pop(0)&lt;/code&gt;, &lt;code&gt;insert(0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt; is an array with keys stored at integer indexes according to hash value: &lt;ul&gt;
&lt;li&gt;hash -- key address -- value address&lt;/li&gt;
&lt;li&gt;PyCon 2010 "The mighty dictionary"&lt;/li&gt;
&lt;li&gt;can build compound keys with tuple&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;set: dictionary with no keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;, &lt;code&gt;heapq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2013 PyCon, the clean architecture in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rescuetime.com/"&gt;rescue time&lt;/a&gt; is a neat productivity tool.&lt;/li&gt;
&lt;/ul&gt;</description><category>Code</category><category>Weekly</category><guid>https://xysun.github.io/posts/week-20140406.html</guid><pubDate>Mon, 31 Mar 2014 13:32:10 GMT</pubDate></item><item><title>Weekly 20140330</title><link>https://xysun.github.io/posts/week-20140330.html</link><description>&lt;h4&gt;&lt;a href="http://www.amazon.com/Surely-Feynman-Adventures-Curious-Character/dp/0393316041"&gt;Surely You're joking, Mr. Feynman!&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn what the rest of the world is like. The variety is worthwhile.&lt;/p&gt;
&lt;p&gt;"I could do that, but I won't" -- which is just another way of saying that you can't. &lt;/p&gt;
&lt;p&gt;You don't have to be responsible for the world that you're in.&lt;/p&gt;
&lt;p&gt;You have no responsibility to live up to what other people think you ought to accomplish. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://courses.cs.washington.edu/courses/cse341/13sp/videos/unit1/"&gt;Dan Grossman&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expression: syntax, type-checking, evaluate&lt;/li&gt;
&lt;li&gt;REPL: Read, Evaluate, Print, Loop; do not type &lt;code&gt;use&lt;/code&gt; without restarting REPL&lt;/li&gt;
&lt;li&gt;syntax: &lt;ul&gt;
&lt;li&gt;negation: &lt;code&gt;~5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;division: &lt;code&gt;div&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;after expression evaluated, the expression producing the result is irrelevant --&amp;gt; do not reuse &lt;code&gt;use&lt;/code&gt; in sml&lt;/li&gt;
&lt;li&gt;access pair/tuple: &lt;code&gt;#1 e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;naming: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&lt;/code&gt; &amp;lt;--&amp;gt; &lt;code&gt;pr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://c.learncodethehardway.org/book/"&gt;Learn C the hard way&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex13.html"&gt;switch statement&lt;/a&gt;: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;return 1&lt;/code&gt; --&amp;gt; tell OS there's an error&lt;/li&gt;
&lt;li&gt;only integers allowed (eg. char)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex14.html"&gt;use functions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;forward declaration: use function before defining them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex15.html"&gt;pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I wrote a small &lt;a href="https://gist.github.com/xysun/9837480"&gt;utility&lt;/a&gt; to manage my "My Clippings.txt" from Kindle. This script will create a separate note for each book. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://defunkt.io/gist/"&gt;gist&lt;/a&gt; is an awesome command line tool for gist. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;rlwrap sml&lt;/code&gt; to enable history rollback through arrow keys&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>Weekly</category><category>Code</category><guid>https://xysun.github.io/posts/week-20140330.html</guid><pubDate>Mon, 24 Mar 2014 21:09:02 GMT</pubDate></item><item><title>Weekly 20140323</title><link>https://xysun.github.io/posts/week-20140323.html</link><description>&lt;h4&gt;&lt;a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html"&gt;30 Python language features and tricks&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Extended unpacking&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;List slices with negative step&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Name slices (&lt;code&gt;slice(start, end, slice)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LASTTHREE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LASTTHREE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dictionary comprehension&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Named tuples&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Point'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Use capital letter for set variables&lt;/li&gt;
&lt;li&gt;Counter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections.deque&lt;/code&gt; Double-ended queue&lt;/li&gt;
&lt;li&gt;default dict&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://stackoverflow.com/questions/4431922/link-encryption-with-django-and-python"&gt;Simple URL encryption&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Append a KEY string (with an easy delimitor) to the ID field, then use &lt;code&gt;base64.urlsafe_b64encode&lt;/code&gt; and &lt;code&gt;base64.urlsafe_b64decode&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="https://github.com/mjhea0/flaskr-tdd"&gt;flaskr-tdd&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TDD: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;write a test&lt;/li&gt;
&lt;li&gt;run the test (it should fail)&lt;/li&gt;
&lt;li&gt;write just enough code to pass the test&lt;/li&gt;
&lt;li&gt;refactor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flask test client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tester&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tester&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"html/text"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# response.data include all html text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/docs/patterns/flashing/"&gt;Flask flash system&lt;/a&gt;: &lt;code&gt;get_flashed_messages&lt;/code&gt; --&amp;gt; may be useful for client-side validation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;url_for('static', filename = 'style.css')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://majutsushi.github.io/tagbar/"&gt;Install tagbar on vim&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;create .vim/ if not exist&lt;/li&gt;
&lt;li&gt;Install exuberant ctags&lt;/li&gt;
&lt;li&gt;Install tagbar&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
git clone git://github.com/majutsushi/tagbar
mv tagbar/* .  &lt;span class="c"&gt;# must be directly under .vim/&lt;/span&gt;
sudo rm -r tagbar/
&lt;span class="nb"&gt;cd &lt;/span&gt;doc/
vim tagbar.txt
:helptags .
&lt;span class="c"&gt;# quit vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;edit &lt;code&gt;.vimrc&lt;/code&gt; (below is mine): &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;let &lt;/span&gt;g:tagbar_ctags_bin&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/usr/local/bin/ctags'&lt;/span&gt; &lt;span class="c"&gt;# change to ctags bin path, this is on MacOS&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;g:tagbar_width&lt;span class="o"&gt;=&lt;/span&gt;40
noremap &amp;lt;silent&amp;gt; tb :TagbarOpen fj &amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;useful key shortcuts:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;tb: open tagbar &lt;span class="c"&gt;# my key binding&lt;/span&gt;
p: go to tag, stay in tagbar
&amp;lt;enter&amp;gt;: go to tag
o: toggle fold
*: open all &lt;span class="nv"&gt;fold&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;: collapse all fold
?: keymap &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Code</category><category>Weekly</category><guid>https://xysun.github.io/posts/week-20140323.html</guid><pubDate>Thu, 20 Mar 2014 19:52:36 GMT</pubDate></item><item><title>2013</title><link>https://xysun.github.io/posts/2013.html</link><description>&lt;p&gt;年终奖到账, 交了离职信, 真正就和过去一年说再见了. &lt;/p&gt;
&lt;p&gt;2013年是我的本命年, 真的是曲折起伏波澜壮阔. 从年初工作压力大不顺心一直到4月跌到谷底，到拿到了HackerSchool的录取去纽约玩儿了三个月，期间写代码功力见长但也并不是一帆风顺，回到香港后慢慢地把自己的路子从金融扭到工程，而今再过一个月我所有的工资就将来自于Python, 同时我和其他3个小伙伴一起成立了Women Who Code HK, 手里还有几个项目在参与. 这些事情都是4月前做梦也想不到的。&lt;/p&gt;
&lt;h4&gt;全年目标回顾&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;读书：10本计算机，12本非计算机(6本虚构6本非虚构，包括多于2本中文书)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成程度：读了8本计算机，1本虚构(福尔摩斯), 2本非虚构(Mastery, 中国近代史)
计算机书读得多了别的书精力就少了...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编程方面: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读一个开源项目代码 --&amp;gt; 小项目读了不少，大项目没有。这也是今年打算加强的。&lt;/li&gt;
&lt;li&gt;1万行代码 --&amp;gt; 完成。数了数大概是1.5万行，Python和OCaml一半一半。今年到目前为止已经写了3千行了....&lt;/li&gt;
&lt;li&gt;在GitHub上被打星星/有fork --&amp;gt; 完成。目前一共8颗星。不过纽约回来后忙得没有再启动新的个人项目。是时候立项了。&lt;/li&gt;
&lt;li&gt;活跃在一个邮件列表(mailing list)/社团(community) --&amp;gt; 失败&lt;/li&gt;
&lt;li&gt;用代码赚钱--&amp;gt; 完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生活方面: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旅游: --&amp;gt; 去了新西兰和纽约&lt;/li&gt;
&lt;li&gt;存钱: --&amp;gt; 多谢年终奖，即使停薪三个月依然完成目标。&lt;/li&gt;
&lt;li&gt;换一份工作 --&amp;gt; 完成&lt;/li&gt;
&lt;li&gt;小提琴500小时，进乐团 --&amp;gt; 失败。花在小提琴上面的时间少了。不过生活的重心本来也转移了。&lt;/li&gt;
&lt;li&gt;学会游泳 --&amp;gt; 连续第二年失败....&lt;/li&gt;
&lt;li&gt;跑100次步 --&amp;gt; 跑步33次200公里，爬山2次40公里，徒手锻炼23次。和去年相比大幅下滑。&lt;/li&gt;
&lt;li&gt;双休日10点前起床 --&amp;gt; 纽约前失败了10次。纽约后全部做到，因为实在是太忙了，有时候想睡懒觉在床上用手机看下邮件就默默爬起来洗澡干活去了....&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;年度目标总结&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1年前写这份目标的时候还一边写一边笑话自己自不量力。回过头来看真的是梦想有多大可能性就有多大。譬如我曾经觉得编程方面我一个都实现不了，结果回过头来看编程方面竟然完成率几乎100%。这要是回到1年前告诉那时的自己都不会相信的吧。&lt;/p&gt;
&lt;h4&gt;HackerSchool给了我什么&lt;/h4&gt;
&lt;p&gt;如果写一个HackerSchool之后我做了些什么会是一个牛逼闪闪的单子: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;换了工作&lt;/li&gt;
&lt;li&gt;同时给某个初创企业写Python后台&lt;/li&gt;
&lt;li&gt;成立了Women Who Code HK&lt;/li&gt;
&lt;li&gt;参与了一些国际化的开源项目，经常半夜和不同时区的小伙伴们一起开会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但这些都是表象，我清楚背后HackerSchool真正给我的是这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无与伦比的人脉。认识了一群也许是未来十几年甚至几十年美国和一些其他地区程序界的中坚力量。&lt;/li&gt;
&lt;li&gt;养成了良好的编程和讨论习惯。保持了好奇心。&lt;/li&gt;
&lt;li&gt;学会分享。&lt;/li&gt;
&lt;li&gt;不再害怕面对觉得太学术太难的问题。&lt;/li&gt;
&lt;li&gt;以及最重要的，学会去做一个无论多么牛逼闪闪都依然善良耐心的正人君子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些得着是对无论以后做什么都有益的。&lt;/p&gt;
&lt;h4&gt;我为什么离开DB&lt;/h4&gt;
&lt;p&gt;基本就是这几个原因: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;市场风险不是我的长期理想职业方向, 如果还在金融业的话我希望自己转到前台做交易员。而新的工作离这个目标更接近。&lt;/li&gt;
&lt;li&gt;三年下来觉得我已经像个吸饱了水的海绵学习曲线已经放平了，每天的工作都在自己的comfort zone里面并没有太大挑战。我承认小队长的工作看起来比较有趣，但我是否愿意继续混十几年做到他这个地方呢？我觉得这十几年花在别的地方成就会更大。&lt;/li&gt;
&lt;li&gt;在这个团队做得不是很开心，说狠一点就是经常被猪一样的队友噎死。&lt;/li&gt;
&lt;li&gt;我最怕的是以后变成那些人到中年没有别的本事只能在后台混日子还感觉良好的大多数人。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;递信之后意外地得到了许多老大级别人物的挽留(亚洲区市场风险老大形容我是one of the brightest youngsters I've ever worked with -- 我共事过的最聪明的年轻人之一)，经常被各种MD叫到小屋子里去谈话，这至少也证明了三年里我的工作得到了肯定。这样离开也没有遗憾了。&lt;/p&gt;
&lt;p&gt;也收到了一些所谓counter-offer, 但是敝行给出的职位我都不是很满意，我最想去的衍生品交易没有空位，然后给在纽约认识的前瑞银某MD写了个邮件，他回过来说: &lt;/p&gt;
&lt;p&gt;It's been pointed out recently that "do what you love" is obnoxious as a general philosophy, because the vast majority of the world doesn't have that option. But if you do have the option, then it's a no-brainer.&lt;/p&gt;
&lt;p&gt;(有人指出"要做你热爱的事情"是无稽之谈因为这个世界上的多数人都没有这个选择。然而如果你真的有这个选项，根本不用犹豫。)&lt;/p&gt;
&lt;p&gt;然后前两天晚上又和前教授新老板吃了个晚饭，一起聊未来的技术发展聊得很开心。&lt;/p&gt;
&lt;p&gt;所以就这样决定了吧。我总是说30岁前我不打算正经赚钱，我在德银也算攒到了第一笔金，是时候趁还输得起的年纪去别的地方闯一闯了。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;今年是毕业参加工作的第三年。如果第一年是初入职场的兴奋，第二年是轻车熟路，第三年就是临界点了。这一年是目前为止最辛苦的一年，也是收获最大的一年，我很高兴付出都有回报，而梦想依然在路上。&lt;/p&gt;
&lt;p&gt;当然了，要成为"本年龄段本性别里最好的程序员", 要实现给航天飞机和电影写代码的理想，要一项项勾掉"人生100个目标"那张单子，我才刚走过起点呢。&lt;/p&gt;
&lt;p&gt;Always remember the future comes one day a time.&lt;/p&gt;
&lt;p&gt;永远记住，未来是一天天来到的。&lt;/p&gt;</description><category>chinese</category><guid>https://xysun.github.io/posts/2013.html</guid><pubDate>Mon, 24 Feb 2014 23:18:25 GMT</pubDate></item></channel></rss>