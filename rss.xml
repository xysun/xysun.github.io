<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Do Nothing</title><link>https://xysun.github.io</link><description>I strove for none, for none was worth my strife.</description><atom:link href="https://xysun.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><lastBuildDate>Sun, 30 Mar 2014 01:06:07 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Weekly 20140330</title><link>https://xysun.github.io/posts/week-20140330.html</link><description>&lt;h4&gt;&lt;a href="http://www.amazon.com/Surely-Feynman-Adventures-Curious-Character/dp/0393316041"&gt;Surely You're joking, Mr. Feynman!&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn what the rest of the world is like. The variety is worthwhile.&lt;/p&gt;
&lt;p&gt;"I could do that, but I won't" -- which is just another way of saying that you can't. &lt;/p&gt;
&lt;p&gt;You don't have to be responsible for the world that you're in.&lt;/p&gt;
&lt;p&gt;You have no responsibility to live up to what other people think you ought to accomplish. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://courses.cs.washington.edu/courses/cse341/13sp/videos/unit1/"&gt;Dan Grossman&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expression: syntax, type-checking, evaluate&lt;/li&gt;
&lt;li&gt;REPL: Read, Evaluate, Print, Loop; do not type &lt;code&gt;use&lt;/code&gt; without restarting REPL&lt;/li&gt;
&lt;li&gt;syntax: &lt;ul&gt;
&lt;li&gt;negation: &lt;code&gt;~5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;division: &lt;code&gt;div&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;after expression evaluated, the expression producing the result is irrelevant --&amp;gt; do not reuse &lt;code&gt;use&lt;/code&gt; in sml&lt;/li&gt;
&lt;li&gt;access pair/tuple: &lt;code&gt;#1 e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;naming: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&lt;/code&gt; &amp;lt;--&amp;gt; &lt;code&gt;pr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://c.learncodethehardway.org/book/"&gt;Learn C the hard way&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex13.html"&gt;switch statement&lt;/a&gt;: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;return 1&lt;/code&gt; --&amp;gt; tell OS there's an error&lt;/li&gt;
&lt;li&gt;only integers allowed (eg. char)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex14.html"&gt;use functions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;forward declaration: use function before defining them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex15.html"&gt;pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I wrote a small &lt;a href="https://gist.github.com/xysun/9837480"&gt;utility&lt;/a&gt; to manage my "My Clippings.txt" from Kindle. This script will create a separate note for each book. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://defunkt.io/gist/"&gt;gist&lt;/a&gt; is an awesome command line tool for gist. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;rlwrap sml&lt;/code&gt; to enable history rollback through arrow keys&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>Weekly</category><category>Code</category><guid>https://xysun.github.io/posts/week-20140330.html</guid><pubDate>Mon, 24 Mar 2014 21:09:02 GMT</pubDate></item><item><title>Weekly 20140323</title><link>https://xysun.github.io/posts/week-20140323.html</link><description>&lt;h4&gt;&lt;a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html"&gt;30 Python language features and tricks&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Extended unpacking&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;List slices with negative step&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Name slices (&lt;code&gt;slice(start, end, slice)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LASTTHREE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LASTTHREE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dictionary comprehension&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Named tuples&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Point'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Use capital letter for set variables&lt;/li&gt;
&lt;li&gt;Counter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections.deque&lt;/code&gt; Double-ended queue&lt;/li&gt;
&lt;li&gt;default dict&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://stackoverflow.com/questions/4431922/link-encryption-with-django-and-python"&gt;Simple URL encryption&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Append a KEY string (with an easy delimitor) to the ID field, then use &lt;code&gt;base64.urlsafe_b64encode&lt;/code&gt; and &lt;code&gt;base64.urlsafe_b64decode&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="https://github.com/mjhea0/flaskr-tdd"&gt;flaskr-tdd&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TDD: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;write a test&lt;/li&gt;
&lt;li&gt;run the test (it should fail)&lt;/li&gt;
&lt;li&gt;write just enough code to pass the test&lt;/li&gt;
&lt;li&gt;refactor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flask test client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tester&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tester&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"html/text"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# response.data include all html text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/docs/patterns/flashing/"&gt;Flask flash system&lt;/a&gt;: &lt;code&gt;get_flashed_messages&lt;/code&gt; --&amp;gt; may be useful for client-side validation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;url_for('static', filename = 'style.css')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://majutsushi.github.io/tagbar/"&gt;Install tagbar on vim&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;create .vim/ if not exist&lt;/li&gt;
&lt;li&gt;Install exuberant ctags&lt;/li&gt;
&lt;li&gt;Install tagbar&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
git clone git://github.com/majutsushi/tagbar
mv tagbar/* .  &lt;span class="c"&gt;# must be directly under .vim/&lt;/span&gt;
sudo rm -r tagbar/
&lt;span class="nb"&gt;cd &lt;/span&gt;doc/
vim tagbar.txt
:helptags .
&lt;span class="c"&gt;# quit vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;edit &lt;code&gt;.vimrc&lt;/code&gt; (below is mine): &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;let &lt;/span&gt;g:tagbar_ctags_bin&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/usr/local/bin/ctags'&lt;/span&gt; &lt;span class="c"&gt;# change to ctags bin path, this is on MacOS&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;g:tagbar_width&lt;span class="o"&gt;=&lt;/span&gt;40
noremap &amp;lt;silent&amp;gt; tb :TagbarOpen fj &amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;useful key shortcuts:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;tb: open tagbar &lt;span class="c"&gt;# my key binding&lt;/span&gt;
p: go to tag, stay in tagbar
&amp;lt;enter&amp;gt;: go to tag
o: toggle fold
*: open all &lt;span class="nv"&gt;fold&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;: collapse all fold
?: keymap &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Code</category><category>Weekly</category><guid>https://xysun.github.io/posts/week-20140323.html</guid><pubDate>Thu, 20 Mar 2014 19:52:36 GMT</pubDate></item><item><title>2013</title><link>https://xysun.github.io/posts/2013.html</link><description>&lt;p&gt;年终奖到账, 交了离职信, 真正就和过去一年说再见了. &lt;/p&gt;
&lt;p&gt;2013年是我的本命年, 真的是曲折起伏波澜壮阔. 从年初工作压力大不顺心一直到4月跌到谷底，到拿到了HackerSchool的录取去纽约玩儿了三个月，期间写代码功力见长但也并不是一帆风顺，回到香港后慢慢地把自己的路子从金融扭到工程，而今再过一个月我所有的工资就将来自于Python, 同时我和其他3个小伙伴一起成立了Women Who Code HK, 手里还有几个项目在参与. 这些事情都是4月前做梦也想不到的。&lt;/p&gt;
&lt;h4&gt;全年目标回顾&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;读书：10本计算机，12本非计算机(6本虚构6本非虚构，包括多于2本中文书)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成程度：读了8本计算机，1本虚构(福尔摩斯), 2本非虚构(Mastery, 中国近代史)
计算机书读得多了别的书精力就少了...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编程方面: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读一个开源项目代码 --&amp;gt; 小项目读了不少，大项目没有。这也是今年打算加强的。&lt;/li&gt;
&lt;li&gt;1万行代码 --&amp;gt; 完成。数了数大概是1.5万行，Python和OCaml一半一半。今年到目前为止已经写了3千行了....&lt;/li&gt;
&lt;li&gt;在GitHub上被打星星/有fork --&amp;gt; 完成。目前一共8颗星。不过纽约回来后忙得没有再启动新的个人项目。是时候立项了。&lt;/li&gt;
&lt;li&gt;活跃在一个邮件列表(mailing list)/社团(community) --&amp;gt; 失败&lt;/li&gt;
&lt;li&gt;用代码赚钱--&amp;gt; 完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生活方面: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旅游: --&amp;gt; 去了新西兰和纽约&lt;/li&gt;
&lt;li&gt;存钱: --&amp;gt; 多谢年终奖，即使停薪三个月依然完成目标。&lt;/li&gt;
&lt;li&gt;换一份工作 --&amp;gt; 完成&lt;/li&gt;
&lt;li&gt;小提琴500小时，进乐团 --&amp;gt; 失败。花在小提琴上面的时间少了。不过生活的重心本来也转移了。&lt;/li&gt;
&lt;li&gt;学会游泳 --&amp;gt; 连续第二年失败....&lt;/li&gt;
&lt;li&gt;跑100次步 --&amp;gt; 跑步33次200公里，爬山2次40公里，徒手锻炼23次。和去年相比大幅下滑。&lt;/li&gt;
&lt;li&gt;双休日10点前起床 --&amp;gt; 纽约前失败了10次。纽约后全部做到，因为实在是太忙了，有时候想睡懒觉在床上用手机看下邮件就默默爬起来洗澡干活去了....&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;年度目标总结&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1年前写这份目标的时候还一边写一边笑话自己自不量力。回过头来看真的是梦想有多大可能性就有多大。譬如我曾经觉得编程方面我一个都实现不了，结果回过头来看编程方面竟然完成率几乎100%。这要是回到1年前告诉那时的自己都不会相信的吧。&lt;/p&gt;
&lt;h4&gt;HackerSchool给了我什么&lt;/h4&gt;
&lt;p&gt;如果写一个HackerSchool之后我做了些什么会是一个牛逼闪闪的单子: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;换了工作&lt;/li&gt;
&lt;li&gt;同时给某个初创企业写Python后台&lt;/li&gt;
&lt;li&gt;成立了Women Who Code HK&lt;/li&gt;
&lt;li&gt;参与了一些国际化的开源项目，经常半夜和不同时区的小伙伴们一起开会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但这些都是表象，我清楚背后HackerSchool真正给我的是这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无与伦比的人脉。认识了一群也许是未来十几年甚至几十年美国和一些其他地区程序界的中坚力量。&lt;/li&gt;
&lt;li&gt;养成了良好的编程和讨论习惯。保持了好奇心。&lt;/li&gt;
&lt;li&gt;学会分享。&lt;/li&gt;
&lt;li&gt;不再害怕面对觉得太学术太难的问题。&lt;/li&gt;
&lt;li&gt;以及最重要的，学会去做一个无论多么牛逼闪闪都依然善良耐心的正人君子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些得着是对无论以后做什么都有益的。&lt;/p&gt;
&lt;h4&gt;我为什么离开DB&lt;/h4&gt;
&lt;p&gt;基本就是这几个原因: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;市场风险不是我的长期理想职业方向, 如果还在金融业的话我希望自己转到前台做交易员。而新的工作离这个目标更接近。&lt;/li&gt;
&lt;li&gt;三年下来觉得我已经像个吸饱了水的海绵学习曲线已经放平了，每天的工作都在自己的comfort zone里面并没有太大挑战。我承认小队长的工作看起来比较有趣，但我是否愿意继续混十几年做到他这个地方呢？我觉得这十几年花在别的地方成就会更大。&lt;/li&gt;
&lt;li&gt;在这个团队做得不是很开心，说狠一点就是经常被猪一样的队友噎死。&lt;/li&gt;
&lt;li&gt;我最怕的是以后变成那些人到中年没有别的本事只能在后台混日子还感觉良好的大多数人。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;递信之后意外地得到了许多老大级别人物的挽留(亚洲区市场风险老大形容我是one of the brightest youngsters I've ever worked with -- 我共事过的最聪明的年轻人之一)，经常被各种MD叫到小屋子里去谈话，这至少也证明了三年里我的工作得到了肯定。这样离开也没有遗憾了。&lt;/p&gt;
&lt;p&gt;也收到了一些所谓counter-offer, 但是敝行给出的职位我都不是很满意，我最想去的衍生品交易没有空位，然后给在纽约认识的前瑞银某MD写了个邮件，他回过来说: &lt;/p&gt;
&lt;p&gt;It's been pointed out recently that "do what you love" is obnoxious as a general philosophy, because the vast majority of the world doesn't have that option. But if you do have the option, then it's a no-brainer.&lt;/p&gt;
&lt;p&gt;(有人指出"要做你热爱的事情"是无稽之谈因为这个世界上的多数人都没有这个选择。然而如果你真的有这个选项，根本不用犹豫。)&lt;/p&gt;
&lt;p&gt;然后前两天晚上又和前教授新老板吃了个晚饭，一起聊未来的技术发展聊得很开心。&lt;/p&gt;
&lt;p&gt;所以就这样决定了吧。我总是说30岁前我不打算正经赚钱，我在德银也算攒到了第一笔金，是时候趁还输得起的年纪去别的地方闯一闯了。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;今年是毕业参加工作的第三年。如果第一年是初入职场的兴奋，第二年是轻车熟路，第三年就是临界点了。这一年是目前为止最辛苦的一年，也是收获最大的一年，我很高兴付出都有回报，而梦想依然在路上。&lt;/p&gt;
&lt;p&gt;当然了，要成为"本年龄段本性别里最好的程序员", 要实现给航天飞机和电影写代码的理想，要一项项勾掉"人生100个目标"那张单子，我才刚走过起点呢。&lt;/p&gt;
&lt;p&gt;Always remember the future comes one day a time.&lt;/p&gt;
&lt;p&gt;永远记住，未来是一天天来到的。&lt;/p&gt;</description><category>chinese</category><guid>https://xysun.github.io/posts/2013.html</guid><pubDate>Mon, 24 Feb 2014 23:18:25 GMT</pubDate></item><item><title>Miguel's flask mega tutorial</title><link>https://xysun.github.io/posts/miguels-flask-mega-tutorial.html</link><description>&lt;p&gt;&lt;a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;flask:&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;url_for&lt;/code&gt; to build and reference URLs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.before_request&lt;/code&gt;, &lt;code&gt;app.after_request&lt;/code&gt; (&lt;code&gt;after_request&lt;/code&gt; can be used to measure database query performance)&lt;/li&gt;
&lt;li&gt;Rotating file handler&lt;/li&gt;
&lt;li&gt;Don't use &lt;code&gt;window.history.back&lt;/code&gt; in forms&lt;/li&gt;
&lt;li&gt;Move logic away from &lt;code&gt;views&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Better return query objects than query results&lt;/li&gt;
&lt;li&gt;Pagination (&lt;code&gt;yield_per&lt;/code&gt; in sqlalchemy)&lt;/li&gt;
&lt;li&gt;Unit test: &lt;ul&gt;
&lt;li&gt;use a different test database&lt;/li&gt;
&lt;li&gt;regression testing: write a test for every new bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging: &lt;code&gt;pdb.set_trace()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jinja:&lt;ul&gt;
&lt;li&gt;Global variables/utilities like &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;url_for&lt;/code&gt; are available in Jinja templates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render_template&lt;/code&gt; can be used in rendering HTML email templates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Useful plugins: &lt;code&gt;coverage&lt;/code&gt;, &lt;code&gt;cProfile&lt;/code&gt;, werkzeug profiler&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Code snippets&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pass variable in URL:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
@app.route('/index/&amp;lt;int:page&amp;gt;')
def turnto(page):&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;include&lt;/code&gt; in control statements in Jinja:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{% for post in posts %}
    {% include "post.html" %}
{% endfor %}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rollback when error occurred:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
@app.errorhandler(500)
def err500():
    dbsession.rollback()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python's fake mail server: &lt;code&gt;python -m smtpd -n -c DebuggingServer localhost:1025&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asynchoronous decorator:&lt;/p&gt;
&lt;p&gt;```python
from threading import Thread
from functools import wraps&lt;/p&gt;
&lt;p&gt;def async(f):
    @wraps(f)
    def wrapper(&lt;em&gt;args, &lt;/em&gt;*kwargs):
        thr = Thread(target = f, args = args, kwargs = kwargs)
        thr.start()
    return wrapper
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expose new global variables in Jinja:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
app.jinja_env.globals['momentjs'] = momentjs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>Code</category><guid>https://xysun.github.io/posts/miguels-flask-mega-tutorial.html</guid><pubDate>Sun, 23 Feb 2014 17:01:52 GMT</pubDate></item></channel></rss>