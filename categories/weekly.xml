<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Do Nothing (Weekly)</title><link>https://xysun.github.io</link><description>I strove for none, for none was worth my strife.</description><atom:link href="https://xysun.github.io/categories/weekly.xml" type="application/rss+xml" rel="self"></atom:link><lastBuildDate>Thu, 01 May 2014 21:34:40 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Week 20140420</title><link>https://xysun.github.io/posts/week-20140420.html</link><description>&lt;h4&gt;&lt;a href="https://www.youtube.com/watch?v=St9cL47_1GI"&gt;Advanced technique for web functional testing&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;test responsive: &lt;code&gt;self.driver.set_window_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Needle -- test by comparing screenshots&lt;/li&gt;
&lt;li&gt;Saucelabs&lt;/li&gt;
&lt;li&gt;&lt;a href="http://davehaeffner.com/selenium-guidebook/"&gt;the selenium guidebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;selenium testing tools cookbook&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://blog.miguelgrinberg.com/post/easy-web-scraping-with-python"&gt;Web scraping with Python&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multiprocessing.Pool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argparse&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Micellaneous&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845"&gt;decorators with arguments&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;manually create swap file&lt;/p&gt;
&lt;p&gt;Recently when I try to update the &lt;code&gt;opam&lt;/code&gt; on my &lt;a href="https://www.digitalocean.com/?refcode=52476c7ad3e1"&gt;DigitalOcean&lt;/a&gt; server, the below error pop up: &lt;/p&gt;
&lt;p&gt;opam: "fork" failed: Cannot allocate memory.&lt;/p&gt;
&lt;p&gt;It is due to lack of RAM memory. The solution is to create a swap file. I followed the instructions &lt;a href="http://wiki.paparazziuav.org/wiki/GettingTheGCSRunningonAGumstixBoard"&gt;here&lt;/a&gt;, note to compile &lt;code&gt;core&lt;/code&gt; a 512MB swap is not enough, I ended up creating a 1G swap. DigitalOcean also has a nice article on &lt;a href="https://www.digitalocean.com/community/articles/how-to-add-swap-on-ubuntu-12-04"&gt;creating swap files&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>Code</category><category>Weekly</category><guid>https://xysun.github.io/posts/week-20140420.html</guid><pubDate>Mon, 14 Apr 2014 21:41:33 GMT</pubDate></item><item><title>Week 20140406</title><link>https://xysun.github.io/posts/week-20140406.html</link><description>&lt;h4&gt;Dan Grossman&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;functions over lists are usually recursive: empty list; non-empty list (&lt;code&gt;hd&lt;/code&gt;, &lt;code&gt;tl&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;let expression: &lt;code&gt;let...in...end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Do a recursive computation, store in (local binding)&lt;/li&gt;
&lt;li&gt;Option: &lt;code&gt;isSome&lt;/code&gt;, &lt;code&gt;valOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bool comparisons: &lt;code&gt;andalso&lt;/code&gt;, &lt;code&gt;orelse&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;real&lt;/code&gt; is not an equality type (subject to round errors)&lt;/li&gt;
&lt;li&gt;no mutation --&amp;gt; no need to worry about alias or copies --&amp;gt; implementation more efficient &amp;amp; better security&lt;/li&gt;
&lt;li&gt;Done &lt;a href="https://github.com/xysun/armory/tree/master/ProgrammingLanguages"&gt;HW1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://www.youtube.com/watch?v=fYlnfvKVDoM"&gt;Brandon Rhodes Pycon talk&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://duartes.org/gustavo/blog/post/what-your-computer-does-while-you-wait/"&gt;Gustavo Duarte -- what your computer does while you wait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danluu.com/3c-conflict/"&gt;Dan Luu -- how misaligning data can increase performance 12x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python store general purpose data structures (eg. tuple) as array of addresses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt; on a list adds extra spaces -- amortization&lt;/li&gt;
&lt;li&gt;list is fast for tail operations: &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;. Not &lt;code&gt;pop(0)&lt;/code&gt;, &lt;code&gt;insert(0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt; is an array with keys stored at integer indexes according to hash value: &lt;ul&gt;
&lt;li&gt;hash -- key address -- value address&lt;/li&gt;
&lt;li&gt;PyCon 2010 "The mighty dictionary"&lt;/li&gt;
&lt;li&gt;can build compound keys with tuple&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;set: dictionary with no keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;, &lt;code&gt;heapq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2013 PyCon, the clean architecture in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rescuetime.com/"&gt;rescue time&lt;/a&gt; is a neat productivity tool.&lt;/li&gt;
&lt;/ul&gt;</description><category>Code</category><category>Weekly</category><guid>https://xysun.github.io/posts/week-20140406.html</guid><pubDate>Mon, 31 Mar 2014 13:32:10 GMT</pubDate></item><item><title>Weekly 20140330</title><link>https://xysun.github.io/posts/week-20140330.html</link><description>&lt;h4&gt;&lt;a href="http://www.amazon.com/Surely-Feynman-Adventures-Curious-Character/dp/0393316041"&gt;Surely You're joking, Mr. Feynman!&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn what the rest of the world is like. The variety is worthwhile.&lt;/p&gt;
&lt;p&gt;"I could do that, but I won't" -- which is just another way of saying that you can't. &lt;/p&gt;
&lt;p&gt;You don't have to be responsible for the world that you're in.&lt;/p&gt;
&lt;p&gt;You have no responsibility to live up to what other people think you ought to accomplish. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://courses.cs.washington.edu/courses/cse341/13sp/videos/unit1/"&gt;Dan Grossman&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expression: syntax, type-checking, evaluate&lt;/li&gt;
&lt;li&gt;REPL: Read, Evaluate, Print, Loop; do not type &lt;code&gt;use&lt;/code&gt; without restarting REPL&lt;/li&gt;
&lt;li&gt;syntax: &lt;ul&gt;
&lt;li&gt;negation: &lt;code&gt;~5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;division: &lt;code&gt;div&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;after expression evaluated, the expression producing the result is irrelevant --&amp;gt; do not reuse &lt;code&gt;use&lt;/code&gt; in sml&lt;/li&gt;
&lt;li&gt;access pair/tuple: &lt;code&gt;#1 e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;naming: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&lt;/code&gt; &amp;lt;--&amp;gt; &lt;code&gt;pr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://c.learncodethehardway.org/book/"&gt;Learn C the hard way&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex13.html"&gt;switch statement&lt;/a&gt;: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;return 1&lt;/code&gt; --&amp;gt; tell OS there's an error&lt;/li&gt;
&lt;li&gt;only integers allowed (eg. char)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex14.html"&gt;use functions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;forward declaration: use function before defining them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c.learncodethehardway.org/book/ex15.html"&gt;pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I wrote a small &lt;a href="https://gist.github.com/xysun/9837480"&gt;utility&lt;/a&gt; to manage my "My Clippings.txt" from Kindle. This script will create a separate note for each book. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://defunkt.io/gist/"&gt;gist&lt;/a&gt; is an awesome command line tool for gist. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;rlwrap sml&lt;/code&gt; to enable history rollback through arrow keys&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>Weekly</category><category>Code</category><guid>https://xysun.github.io/posts/week-20140330.html</guid><pubDate>Mon, 24 Mar 2014 21:09:02 GMT</pubDate></item><item><title>Weekly 20140323</title><link>https://xysun.github.io/posts/week-20140323.html</link><description>&lt;h4&gt;&lt;a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html"&gt;30 Python language features and tricks&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Extended unpacking&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;List slices with negative step&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Name slices (&lt;code&gt;slice(start, end, slice)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LASTTHREE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LASTTHREE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dictionary comprehension&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Named tuples&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Point'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Use capital letter for set variables&lt;/li&gt;
&lt;li&gt;Counter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections.deque&lt;/code&gt; Double-ended queue&lt;/li&gt;
&lt;li&gt;default dict&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://stackoverflow.com/questions/4431922/link-encryption-with-django-and-python"&gt;Simple URL encryption&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Append a KEY string (with an easy delimitor) to the ID field, then use &lt;code&gt;base64.urlsafe_b64encode&lt;/code&gt; and &lt;code&gt;base64.urlsafe_b64decode&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="https://github.com/mjhea0/flaskr-tdd"&gt;flaskr-tdd&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TDD: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;write a test&lt;/li&gt;
&lt;li&gt;run the test (it should fail)&lt;/li&gt;
&lt;li&gt;write just enough code to pass the test&lt;/li&gt;
&lt;li&gt;refactor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flask test client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tester&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tester&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"html/text"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# response.data include all html text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/docs/patterns/flashing/"&gt;Flask flash system&lt;/a&gt;: &lt;code&gt;get_flashed_messages&lt;/code&gt; --&amp;gt; may be useful for client-side validation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;url_for('static', filename = 'style.css')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;a href="http://majutsushi.github.io/tagbar/"&gt;Install tagbar on vim&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;create .vim/ if not exist&lt;/li&gt;
&lt;li&gt;Install exuberant ctags&lt;/li&gt;
&lt;li&gt;Install tagbar&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
git clone git://github.com/majutsushi/tagbar
mv tagbar/* .  &lt;span class="c"&gt;# must be directly under .vim/&lt;/span&gt;
sudo rm -r tagbar/
&lt;span class="nb"&gt;cd &lt;/span&gt;doc/
vim tagbar.txt
:helptags .
&lt;span class="c"&gt;# quit vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;edit &lt;code&gt;.vimrc&lt;/code&gt; (below is mine): &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;let &lt;/span&gt;g:tagbar_ctags_bin&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/usr/local/bin/ctags'&lt;/span&gt; &lt;span class="c"&gt;# change to ctags bin path, this is on MacOS&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;g:tagbar_width&lt;span class="o"&gt;=&lt;/span&gt;40
noremap &amp;lt;silent&amp;gt; tb :TagbarOpen fj &amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;useful key shortcuts:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre&gt;tb: open tagbar &lt;span class="c"&gt;# my key binding&lt;/span&gt;
p: go to tag, stay in tagbar
&amp;lt;enter&amp;gt;: go to tag
o: toggle fold
*: open all &lt;span class="nv"&gt;fold&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;: collapse all fold
?: keymap &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Code</category><category>Weekly</category><guid>https://xysun.github.io/posts/week-20140323.html</guid><pubDate>Thu, 20 Mar 2014 19:52:36 GMT</pubDate></item></channel></rss>